// Autogenerated by gameplay-luagen
#include "ScriptController.h"
#include "lua_Global.h"
#include "AIMessage.h"
#include "AnimationClip.h"
#include "AudioSource.h"
#include "Camera.h"
#include "Container.h"
#include "Control.h"
#include "Curve.h"
#include "DepthStencilTarget.h"
#include "Font.h"
#include "Game.h"
#include "Gamepad.h"
#include "Gesture.h"
#include "Image.h"
#include "Keyboard.h"
#include "Layout.h"
#include "Light.h"
#include "Logger.h"
#include "Mesh.h"
#include "Mouse.h"
#include "Node.h"
#include "ParticleEmitter.h"
#include "PhysicsCollisionObject.h"
#include "PhysicsCollisionShape.h"
#include "PhysicsController.h"
#include "Properties.h"
#include "RenderState.h"
#include "Script.h"
#include "Sprite.h"
#include "Terrain.h"
#include "TextBox.h"
#include "Texture.h"
#include "Touch.h"
#include "VertexFormat.h"

namespace egret
{

void luaRegister_lua_Global()
{
    egret::ScriptUtil::registerFunction("strcmpnocase", lua__strcmpnocase);
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Button");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "CheckBox");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Container");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Control");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Form");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "ImageControl");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Joint");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "JoystickControl");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Label");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "MaterialParameter");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Node");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "RadioButton");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Slider");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Sprite");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Text");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "TextBox");
    egret::ScriptUtil::setGlobalHierarchyPair("AnimationTarget", "Transform");
    egret::ScriptUtil::setGlobalHierarchyPair("Button", "CheckBox");
    egret::ScriptUtil::setGlobalHierarchyPair("Button", "RadioButton");
    egret::ScriptUtil::setGlobalHierarchyPair("Camera::Listener", "AudioListener");
    egret::ScriptUtil::setGlobalHierarchyPair("Camera::Listener", "TerrainPatch");
    egret::ScriptUtil::setGlobalHierarchyPair("Container", "Form");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "Button");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "CheckBox");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "Container");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "Form");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "ImageControl");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "JoystickControl");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "Label");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "RadioButton");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "Slider");
    egret::ScriptUtil::setGlobalHierarchyPair("Control", "TextBox");
    egret::ScriptUtil::setGlobalHierarchyPair("Drawable", "Form");
    egret::ScriptUtil::setGlobalHierarchyPair("Drawable", "Model");
    egret::ScriptUtil::setGlobalHierarchyPair("Drawable", "ParticleEmitter");
    egret::ScriptUtil::setGlobalHierarchyPair("Drawable", "Sprite");
    egret::ScriptUtil::setGlobalHierarchyPair("Drawable", "Terrain");
    egret::ScriptUtil::setGlobalHierarchyPair("Drawable", "Text");
    egret::ScriptUtil::setGlobalHierarchyPair("Drawable", "TileSet");
    egret::ScriptUtil::setGlobalHierarchyPair("Label", "Button");
    egret::ScriptUtil::setGlobalHierarchyPair("Label", "CheckBox");
    egret::ScriptUtil::setGlobalHierarchyPair("Label", "RadioButton");
    egret::ScriptUtil::setGlobalHierarchyPair("Label", "Slider");
    egret::ScriptUtil::setGlobalHierarchyPair("Label", "TextBox");
    egret::ScriptUtil::setGlobalHierarchyPair("Layout", "AbsoluteLayout");
    egret::ScriptUtil::setGlobalHierarchyPair("Layout", "FlowLayout");
    egret::ScriptUtil::setGlobalHierarchyPair("Layout", "VerticalLayout");
    egret::ScriptUtil::setGlobalHierarchyPair("Node", "Joint");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsCollisionObject", "PhysicsCharacter");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsCollisionObject", "PhysicsGhostObject");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsCollisionObject", "PhysicsRigidBody");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsCollisionObject", "PhysicsVehicle");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsCollisionObject", "PhysicsVehicleWheel");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsConstraint", "PhysicsFixedConstraint");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsConstraint", "PhysicsGenericConstraint");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsConstraint", "PhysicsHingeConstraint");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsConstraint", "PhysicsSocketConstraint");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsConstraint", "PhysicsSpringConstraint");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsGenericConstraint", "PhysicsFixedConstraint");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsGenericConstraint", "PhysicsSpringConstraint");
    egret::ScriptUtil::setGlobalHierarchyPair("PhysicsGhostObject", "PhysicsCharacter");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "AIAgent");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "AIState");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "AbsoluteLayout");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Animation");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "AnimationClip");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "AudioBuffer");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "AudioSource");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Bundle");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Button");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Camera");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "CheckBox");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Container");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Control");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Curve");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "DepthStencilTarget");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Effect");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "FlowLayout");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Font");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Form");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "FrameBuffer");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "HeightField");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Image");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "ImageControl");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Joint");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "JoystickControl");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Label");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Layout");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Light");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Material");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "MaterialParameter");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Mesh");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Model");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Node");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "ParticleEmitter");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Pass");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "PhysicsCollisionShape");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "RadioButton");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "RenderState");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "RenderState::StateBlock");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "RenderTarget");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Scene");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Script");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Slider");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Sprite");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Technique");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Terrain");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Text");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "TextBox");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Texture");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Texture::Sampler");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Theme");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "Theme::ThemeImage");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "TileSet");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "VertexAttributeBinding");
    egret::ScriptUtil::setGlobalHierarchyPair("Ref", "VerticalLayout");
    egret::ScriptUtil::setGlobalHierarchyPair("RenderState", "Material");
    egret::ScriptUtil::setGlobalHierarchyPair("RenderState", "Pass");
    egret::ScriptUtil::setGlobalHierarchyPair("RenderState", "Technique");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "AnimationClip");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "Button");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "CheckBox");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "Container");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "Control");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "Form");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "GameScriptTarget");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "ImageControl");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "Joint");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "JoystickControl");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "Label");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "Node");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "PhysicsController");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "RadioButton");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "Slider");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "TextBox");
    egret::ScriptUtil::setGlobalHierarchyPair("ScriptTarget", "Transform");
    egret::ScriptUtil::setGlobalHierarchyPair("Transform", "Joint");
    egret::ScriptUtil::setGlobalHierarchyPair("Transform", "Node");
    egret::ScriptUtil::setGlobalHierarchyPair("Transform::Listener", "AudioSource");
    egret::ScriptUtil::setGlobalHierarchyPair("Transform::Listener", "Camera");
    egret::ScriptUtil::setGlobalHierarchyPair("Transform::Listener", "MeshSkin");
    egret::ScriptUtil::setGlobalHierarchyPair("Transform::Listener", "PhysicsCharacter");
    egret::ScriptUtil::setGlobalHierarchyPair("Transform::Listener", "PhysicsGhostObject");
    egret::ScriptUtil::setGlobalHierarchyPair("Transform::Listener", "PhysicsRigidBody");
    egret::ScriptUtil::setGlobalHierarchyPair("Transform::Listener", "Terrain");

    // Register enumeration AIMessage::ParameterType.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("AIMessage");
        egret::ScriptUtil::registerEnumValue(AIMessage::UNDEFINED, "UNDEFINED", scopePath);
        egret::ScriptUtil::registerEnumValue(AIMessage::INTEGER, "INTEGER", scopePath);
        egret::ScriptUtil::registerEnumValue(AIMessage::LONG, "LONG", scopePath);
        egret::ScriptUtil::registerEnumValue(AIMessage::FLOAT, "FLOAT", scopePath);
        egret::ScriptUtil::registerEnumValue(AIMessage::DOUBLE, "DOUBLE", scopePath);
        egret::ScriptUtil::registerEnumValue(AIMessage::BOOLEAN, "BOOLEAN", scopePath);
        egret::ScriptUtil::registerEnumValue(AIMessage::STRING, "STRING", scopePath);
    }

    // Register enumeration AnimationClip::Listener::EventType.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("AnimationClip");
        scopePath.push_back("Listener");
        egret::ScriptUtil::registerEnumValue(AnimationClip::Listener::BEGIN, "BEGIN", scopePath);
        egret::ScriptUtil::registerEnumValue(AnimationClip::Listener::END, "END", scopePath);
        egret::ScriptUtil::registerEnumValue(AnimationClip::Listener::TIME, "TIME", scopePath);
    }

    // Register enumeration AudioSource::State.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("AudioSource");
        egret::ScriptUtil::registerEnumValue(AudioSource::INITIAL, "INITIAL", scopePath);
        egret::ScriptUtil::registerEnumValue(AudioSource::PLAYING, "PLAYING", scopePath);
        egret::ScriptUtil::registerEnumValue(AudioSource::PAUSED, "PAUSED", scopePath);
        egret::ScriptUtil::registerEnumValue(AudioSource::STOPPED, "STOPPED", scopePath);
    }

    // Register enumeration Camera::Type.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Camera");
        egret::ScriptUtil::registerEnumValue(Camera::PERSPECTIVE, "PERSPECTIVE", scopePath);
        egret::ScriptUtil::registerEnumValue(Camera::ORTHOGRAPHIC, "ORTHOGRAPHIC", scopePath);
    }

    // Register enumeration Container::Direction.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Container");
        egret::ScriptUtil::registerEnumValue(Container::UP, "UP", scopePath);
        egret::ScriptUtil::registerEnumValue(Container::DOWN, "DOWN", scopePath);
        egret::ScriptUtil::registerEnumValue(Container::LEFT, "LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Container::RIGHT, "RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Container::NEXT, "NEXT", scopePath);
        egret::ScriptUtil::registerEnumValue(Container::PREVIOUS, "PREVIOUS", scopePath);
    }

    // Register enumeration Container::Scroll.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Container");
        egret::ScriptUtil::registerEnumValue(Container::SCROLL_NONE, "SCROLL_NONE", scopePath);
        egret::ScriptUtil::registerEnumValue(Container::SCROLL_HORIZONTAL, "SCROLL_HORIZONTAL", scopePath);
        egret::ScriptUtil::registerEnumValue(Container::SCROLL_VERTICAL, "SCROLL_VERTICAL", scopePath);
        egret::ScriptUtil::registerEnumValue(Container::SCROLL_BOTH, "SCROLL_BOTH", scopePath);
    }

    // Register enumeration Control::Alignment.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Control");
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_LEFT, "ALIGN_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_HCENTER, "ALIGN_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_RIGHT, "ALIGN_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_TOP, "ALIGN_TOP", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_VCENTER, "ALIGN_VCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_BOTTOM, "ALIGN_BOTTOM", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_TOP_LEFT, "ALIGN_TOP_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_VCENTER_LEFT, "ALIGN_VCENTER_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_BOTTOM_LEFT, "ALIGN_BOTTOM_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_TOP_HCENTER, "ALIGN_TOP_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_VCENTER_HCENTER, "ALIGN_VCENTER_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_BOTTOM_HCENTER, "ALIGN_BOTTOM_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_TOP_RIGHT, "ALIGN_TOP_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_VCENTER_RIGHT, "ALIGN_VCENTER_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ALIGN_BOTTOM_RIGHT, "ALIGN_BOTTOM_RIGHT", scopePath);
    }

    // Register enumeration Control::AutoSize.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Control");
        egret::ScriptUtil::registerEnumValue(Control::AUTO_SIZE_NONE, "AUTO_SIZE_NONE", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::AUTO_SIZE_WIDTH, "AUTO_SIZE_WIDTH", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::AUTO_SIZE_HEIGHT, "AUTO_SIZE_HEIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::AUTO_SIZE_BOTH, "AUTO_SIZE_BOTH", scopePath);
    }

    // Register enumeration Control::Listener::EventType.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Control");
        scopePath.push_back("Listener");
        egret::ScriptUtil::registerEnumValue(Control::Listener::PRESS, "PRESS", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::Listener::RELEASE, "RELEASE", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::Listener::CLICK, "CLICK", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::Listener::VALUE_CHANGED, "VALUE_CHANGED", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::Listener::TEXT_CHANGED, "TEXT_CHANGED", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::Listener::MIDDLE_CLICK, "MIDDLE_CLICK", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::Listener::RIGHT_CLICK, "RIGHT_CLICK", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::Listener::FOCUS_GAINED, "FOCUS_GAINED", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::Listener::FOCUS_LOST, "FOCUS_LOST", scopePath);
    }

    // Register enumeration Control::State.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Control");
        egret::ScriptUtil::registerEnumValue(Control::NORMAL, "NORMAL", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::FOCUS, "FOCUS", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::ACTIVE, "ACTIVE", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::DISABLED, "DISABLED", scopePath);
        egret::ScriptUtil::registerEnumValue(Control::HOVER, "HOVER", scopePath);
    }

    // Register enumeration Curve::InterpolationType.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Curve");
        egret::ScriptUtil::registerEnumValue(Curve::BEZIER, "BEZIER", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::BSPLINE, "BSPLINE", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::FLAT, "FLAT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::HERMITE, "HERMITE", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::LINEAR, "LINEAR", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::SMOOTH, "SMOOTH", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::STEP, "STEP", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUADRATIC_IN, "QUADRATIC_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUADRATIC_OUT, "QUADRATIC_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUADRATIC_IN_OUT, "QUADRATIC_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUADRATIC_OUT_IN, "QUADRATIC_OUT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::CUBIC_IN, "CUBIC_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::CUBIC_OUT, "CUBIC_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::CUBIC_IN_OUT, "CUBIC_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::CUBIC_OUT_IN, "CUBIC_OUT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUARTIC_IN, "QUARTIC_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUARTIC_OUT, "QUARTIC_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUARTIC_IN_OUT, "QUARTIC_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUARTIC_OUT_IN, "QUARTIC_OUT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUINTIC_IN, "QUINTIC_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUINTIC_OUT, "QUINTIC_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUINTIC_IN_OUT, "QUINTIC_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::QUINTIC_OUT_IN, "QUINTIC_OUT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::SINE_IN, "SINE_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::SINE_OUT, "SINE_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::SINE_IN_OUT, "SINE_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::SINE_OUT_IN, "SINE_OUT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::EXPONENTIAL_IN, "EXPONENTIAL_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::EXPONENTIAL_OUT, "EXPONENTIAL_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::EXPONENTIAL_IN_OUT, "EXPONENTIAL_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::EXPONENTIAL_OUT_IN, "EXPONENTIAL_OUT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::CIRCULAR_IN, "CIRCULAR_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::CIRCULAR_OUT, "CIRCULAR_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::CIRCULAR_IN_OUT, "CIRCULAR_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::CIRCULAR_OUT_IN, "CIRCULAR_OUT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::ELASTIC_IN, "ELASTIC_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::ELASTIC_OUT, "ELASTIC_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::ELASTIC_IN_OUT, "ELASTIC_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::ELASTIC_OUT_IN, "ELASTIC_OUT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::OVERSHOOT_IN, "OVERSHOOT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::OVERSHOOT_OUT, "OVERSHOOT_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::OVERSHOOT_IN_OUT, "OVERSHOOT_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::OVERSHOOT_OUT_IN, "OVERSHOOT_OUT_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::BOUNCE_IN, "BOUNCE_IN", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::BOUNCE_OUT, "BOUNCE_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::BOUNCE_IN_OUT, "BOUNCE_IN_OUT", scopePath);
        egret::ScriptUtil::registerEnumValue(Curve::BOUNCE_OUT_IN, "BOUNCE_OUT_IN", scopePath);
    }

    // Register enumeration DepthStencilTarget::Format.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("DepthStencilTarget");
        egret::ScriptUtil::registerEnumValue(DepthStencilTarget::DEPTH, "DEPTH", scopePath);
        egret::ScriptUtil::registerEnumValue(DepthStencilTarget::DEPTH_STENCIL, "DEPTH_STENCIL", scopePath);
    }

    // Register enumeration Font::Format.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Font");
        egret::ScriptUtil::registerEnumValue(Font::BITMAP, "BITMAP", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::DISTANCE_FIELD, "DISTANCE_FIELD", scopePath);
    }

    // Register enumeration Font::Justify.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Font");
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_LEFT, "ALIGN_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_HCENTER, "ALIGN_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_RIGHT, "ALIGN_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_TOP, "ALIGN_TOP", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_VCENTER, "ALIGN_VCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_BOTTOM, "ALIGN_BOTTOM", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_TOP_LEFT, "ALIGN_TOP_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_VCENTER_LEFT, "ALIGN_VCENTER_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_BOTTOM_LEFT, "ALIGN_BOTTOM_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_TOP_HCENTER, "ALIGN_TOP_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_VCENTER_HCENTER, "ALIGN_VCENTER_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_BOTTOM_HCENTER, "ALIGN_BOTTOM_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_TOP_RIGHT, "ALIGN_TOP_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_VCENTER_RIGHT, "ALIGN_VCENTER_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ALIGN_BOTTOM_RIGHT, "ALIGN_BOTTOM_RIGHT", scopePath);
    }

    // Register enumeration Font::Style.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Font");
        egret::ScriptUtil::registerEnumValue(Font::PLAIN, "PLAIN", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::BOLD, "BOLD", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::ITALIC, "ITALIC", scopePath);
        egret::ScriptUtil::registerEnumValue(Font::BOLD_ITALIC, "BOLD_ITALIC", scopePath);
    }

    // Register enumeration Game::ClearFlags.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Game");
        egret::ScriptUtil::registerEnumValue(Game::CLEAR_COLOR, "CLEAR_COLOR", scopePath);
        egret::ScriptUtil::registerEnumValue(Game::CLEAR_DEPTH, "CLEAR_DEPTH", scopePath);
        egret::ScriptUtil::registerEnumValue(Game::CLEAR_STENCIL, "CLEAR_STENCIL", scopePath);
        egret::ScriptUtil::registerEnumValue(Game::CLEAR_COLOR_DEPTH, "CLEAR_COLOR_DEPTH", scopePath);
        egret::ScriptUtil::registerEnumValue(Game::CLEAR_COLOR_STENCIL, "CLEAR_COLOR_STENCIL", scopePath);
        egret::ScriptUtil::registerEnumValue(Game::CLEAR_DEPTH_STENCIL, "CLEAR_DEPTH_STENCIL", scopePath);
        egret::ScriptUtil::registerEnumValue(Game::CLEAR_COLOR_DEPTH_STENCIL, "CLEAR_COLOR_DEPTH_STENCIL", scopePath);
    }

    // Register enumeration Game::State.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Game");
        egret::ScriptUtil::registerEnumValue(Game::UNINITIALIZED, "UNINITIALIZED", scopePath);
        egret::ScriptUtil::registerEnumValue(Game::RUNNING, "RUNNING", scopePath);
        egret::ScriptUtil::registerEnumValue(Game::PAUSED, "PAUSED", scopePath);
    }

    // Register enumeration Gamepad::ButtonMapping.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Gamepad");
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_A, "BUTTON_A", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_B, "BUTTON_B", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_X, "BUTTON_X", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_Y, "BUTTON_Y", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_L1, "BUTTON_L1", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_L2, "BUTTON_L2", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_L3, "BUTTON_L3", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_R1, "BUTTON_R1", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_R2, "BUTTON_R2", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_R3, "BUTTON_R3", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_UP, "BUTTON_UP", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_DOWN, "BUTTON_DOWN", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_LEFT, "BUTTON_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_RIGHT, "BUTTON_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_MENU1, "BUTTON_MENU1", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_MENU2, "BUTTON_MENU2", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::BUTTON_MENU3, "BUTTON_MENU3", scopePath);
    }

    // Register enumeration Gamepad::GamepadEvent.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Gamepad");
        egret::ScriptUtil::registerEnumValue(Gamepad::CONNECTED_EVENT, "CONNECTED_EVENT", scopePath);
        egret::ScriptUtil::registerEnumValue(Gamepad::DISCONNECTED_EVENT, "DISCONNECTED_EVENT", scopePath);
    }

    // Register enumeration Gesture::GestureEvent.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Gesture");
        egret::ScriptUtil::registerEnumValue(Gesture::GESTURE_TAP, "GESTURE_TAP", scopePath);
        egret::ScriptUtil::registerEnumValue(Gesture::GESTURE_SWIPE, "GESTURE_SWIPE", scopePath);
        egret::ScriptUtil::registerEnumValue(Gesture::GESTURE_PINCH, "GESTURE_PINCH", scopePath);
        egret::ScriptUtil::registerEnumValue(Gesture::GESTURE_LONG_TAP, "GESTURE_LONG_TAP", scopePath);
        egret::ScriptUtil::registerEnumValue(Gesture::GESTURE_DRAG, "GESTURE_DRAG", scopePath);
        egret::ScriptUtil::registerEnumValue(Gesture::GESTURE_DROP, "GESTURE_DROP", scopePath);
        egret::ScriptUtil::registerEnumValue(Gesture::GESTURE_ANY_SUPPORTED, "GESTURE_ANY_SUPPORTED", scopePath);
    }

    // Register enumeration Image::Format.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Image");
        egret::ScriptUtil::registerEnumValue(Image::RGB, "RGB", scopePath);
        egret::ScriptUtil::registerEnumValue(Image::RGBA, "RGBA", scopePath);
    }

    // Register enumeration Keyboard::Key.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Keyboard");
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_NONE, "KEY_NONE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_PAUSE, "KEY_PAUSE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_SCROLL_LOCK, "KEY_SCROLL_LOCK", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_PRINT, "KEY_PRINT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_SYSREQ, "KEY_SYSREQ", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_BREAK, "KEY_BREAK", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_ESCAPE, "KEY_ESCAPE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_BACKSPACE, "KEY_BACKSPACE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_TAB, "KEY_TAB", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_BACK_TAB, "KEY_BACK_TAB", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_RETURN, "KEY_RETURN", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPS_LOCK, "KEY_CAPS_LOCK", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_SHIFT, "KEY_SHIFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CTRL, "KEY_CTRL", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_ALT, "KEY_ALT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_MENU, "KEY_MENU", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_HYPER, "KEY_HYPER", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_INSERT, "KEY_INSERT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_HOME, "KEY_HOME", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_PG_UP, "KEY_PG_UP", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_DELETE, "KEY_DELETE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_END, "KEY_END", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_PG_DOWN, "KEY_PG_DOWN", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_LEFT_ARROW, "KEY_LEFT_ARROW", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_RIGHT_ARROW, "KEY_RIGHT_ARROW", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_UP_ARROW, "KEY_UP_ARROW", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_DOWN_ARROW, "KEY_DOWN_ARROW", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_NUM_LOCK, "KEY_NUM_LOCK", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_PLUS, "KEY_KP_PLUS", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_MINUS, "KEY_KP_MINUS", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_MULTIPLY, "KEY_KP_MULTIPLY", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_DIVIDE, "KEY_KP_DIVIDE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_ENTER, "KEY_KP_ENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_HOME, "KEY_KP_HOME", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_UP, "KEY_KP_UP", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_PG_UP, "KEY_KP_PG_UP", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_LEFT, "KEY_KP_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_FIVE, "KEY_KP_FIVE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_RIGHT, "KEY_KP_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_END, "KEY_KP_END", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_DOWN, "KEY_KP_DOWN", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_PG_DOWN, "KEY_KP_PG_DOWN", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_INSERT, "KEY_KP_INSERT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_KP_DELETE, "KEY_KP_DELETE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F1, "KEY_F1", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F2, "KEY_F2", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F3, "KEY_F3", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F4, "KEY_F4", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F5, "KEY_F5", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F6, "KEY_F6", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F7, "KEY_F7", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F8, "KEY_F8", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F9, "KEY_F9", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F10, "KEY_F10", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F11, "KEY_F11", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F12, "KEY_F12", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_SPACE, "KEY_SPACE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_EXCLAM, "KEY_EXCLAM", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_QUOTE, "KEY_QUOTE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_NUMBER, "KEY_NUMBER", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_DOLLAR, "KEY_DOLLAR", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_PERCENT, "KEY_PERCENT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CIRCUMFLEX, "KEY_CIRCUMFLEX", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_AMPERSAND, "KEY_AMPERSAND", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_APOSTROPHE, "KEY_APOSTROPHE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_LEFT_PARENTHESIS, "KEY_LEFT_PARENTHESIS", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_RIGHT_PARENTHESIS, "KEY_RIGHT_PARENTHESIS", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_ASTERISK, "KEY_ASTERISK", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_PLUS, "KEY_PLUS", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_COMMA, "KEY_COMMA", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_MINUS, "KEY_MINUS", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_PERIOD, "KEY_PERIOD", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_SLASH, "KEY_SLASH", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_ZERO, "KEY_ZERO", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_ONE, "KEY_ONE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_TWO, "KEY_TWO", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_THREE, "KEY_THREE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_FOUR, "KEY_FOUR", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_FIVE, "KEY_FIVE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_SIX, "KEY_SIX", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_SEVEN, "KEY_SEVEN", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_EIGHT, "KEY_EIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_NINE, "KEY_NINE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_COLON, "KEY_COLON", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_SEMICOLON, "KEY_SEMICOLON", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_LESS_THAN, "KEY_LESS_THAN", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_EQUAL, "KEY_EQUAL", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_GREATER_THAN, "KEY_GREATER_THAN", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_QUESTION, "KEY_QUESTION", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_AT, "KEY_AT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_A, "KEY_CAPITAL_A", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_B, "KEY_CAPITAL_B", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_C, "KEY_CAPITAL_C", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_D, "KEY_CAPITAL_D", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_E, "KEY_CAPITAL_E", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_F, "KEY_CAPITAL_F", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_G, "KEY_CAPITAL_G", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_H, "KEY_CAPITAL_H", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_I, "KEY_CAPITAL_I", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_J, "KEY_CAPITAL_J", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_K, "KEY_CAPITAL_K", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_L, "KEY_CAPITAL_L", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_M, "KEY_CAPITAL_M", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_N, "KEY_CAPITAL_N", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_O, "KEY_CAPITAL_O", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_P, "KEY_CAPITAL_P", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_Q, "KEY_CAPITAL_Q", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_R, "KEY_CAPITAL_R", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_S, "KEY_CAPITAL_S", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_T, "KEY_CAPITAL_T", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_U, "KEY_CAPITAL_U", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_V, "KEY_CAPITAL_V", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_W, "KEY_CAPITAL_W", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_X, "KEY_CAPITAL_X", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_Y, "KEY_CAPITAL_Y", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CAPITAL_Z, "KEY_CAPITAL_Z", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_LEFT_BRACKET, "KEY_LEFT_BRACKET", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_BACK_SLASH, "KEY_BACK_SLASH", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_RIGHT_BRACKET, "KEY_RIGHT_BRACKET", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_UNDERSCORE, "KEY_UNDERSCORE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_GRAVE, "KEY_GRAVE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_A, "KEY_A", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_B, "KEY_B", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_C, "KEY_C", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_D, "KEY_D", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_E, "KEY_E", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_F, "KEY_F", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_G, "KEY_G", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_H, "KEY_H", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_I, "KEY_I", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_J, "KEY_J", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_K, "KEY_K", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_L, "KEY_L", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_M, "KEY_M", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_N, "KEY_N", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_O, "KEY_O", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_P, "KEY_P", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_Q, "KEY_Q", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_R, "KEY_R", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_S, "KEY_S", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_T, "KEY_T", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_U, "KEY_U", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_V, "KEY_V", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_W, "KEY_W", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_X, "KEY_X", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_Y, "KEY_Y", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_Z, "KEY_Z", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_LEFT_BRACE, "KEY_LEFT_BRACE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_BAR, "KEY_BAR", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_RIGHT_BRACE, "KEY_RIGHT_BRACE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_TILDE, "KEY_TILDE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_EURO, "KEY_EURO", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_POUND, "KEY_POUND", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_YEN, "KEY_YEN", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_MIDDLE_DOT, "KEY_MIDDLE_DOT", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_SEARCH, "KEY_SEARCH", scopePath);
    }

    // Register enumeration Keyboard::KeyEvent.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Keyboard");
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_PRESS, "KEY_PRESS", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_RELEASE, "KEY_RELEASE", scopePath);
        egret::ScriptUtil::registerEnumValue(Keyboard::KEY_CHAR, "KEY_CHAR", scopePath);
    }

    // Register enumeration Layout::Type.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Layout");
        egret::ScriptUtil::registerEnumValue(Layout::LAYOUT_FLOW, "LAYOUT_FLOW", scopePath);
        egret::ScriptUtil::registerEnumValue(Layout::LAYOUT_VERTICAL, "LAYOUT_VERTICAL", scopePath);
        egret::ScriptUtil::registerEnumValue(Layout::LAYOUT_ABSOLUTE, "LAYOUT_ABSOLUTE", scopePath);
    }

    // Register enumeration Light::Type.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Light");
        egret::ScriptUtil::registerEnumValue(Light::DIRECTIONAL, "DIRECTIONAL", scopePath);
        egret::ScriptUtil::registerEnumValue(Light::POINT, "POINT", scopePath);
        egret::ScriptUtil::registerEnumValue(Light::SPOT, "SPOT", scopePath);
    }

    // Register enumeration Logger::Level.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Logger");
        egret::ScriptUtil::registerEnumValue(Logger::LEVEL_INFO, "LEVEL_INFO", scopePath);
        egret::ScriptUtil::registerEnumValue(Logger::LEVEL_WARN, "LEVEL_WARN", scopePath);
        egret::ScriptUtil::registerEnumValue(Logger::LEVEL_ERROR, "LEVEL_ERROR", scopePath);
    }

    // Register enumeration Mesh::IndexFormat.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Mesh");
        egret::ScriptUtil::registerEnumValue(Mesh::INDEX8, "INDEX8", scopePath);
        egret::ScriptUtil::registerEnumValue(Mesh::INDEX16, "INDEX16", scopePath);
        egret::ScriptUtil::registerEnumValue(Mesh::INDEX32, "INDEX32", scopePath);
    }

    // Register enumeration Mesh::PrimitiveType.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Mesh");
        egret::ScriptUtil::registerEnumValue(Mesh::TRIANGLES, "TRIANGLES", scopePath);
        egret::ScriptUtil::registerEnumValue(Mesh::TRIANGLE_STRIP, "TRIANGLE_STRIP", scopePath);
        egret::ScriptUtil::registerEnumValue(Mesh::LINES, "LINES", scopePath);
        egret::ScriptUtil::registerEnumValue(Mesh::LINE_STRIP, "LINE_STRIP", scopePath);
        egret::ScriptUtil::registerEnumValue(Mesh::POINTS, "POINTS", scopePath);
    }

    // Register enumeration Mouse::MouseEvent.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Mouse");
        egret::ScriptUtil::registerEnumValue(Mouse::MOUSE_PRESS_LEFT_BUTTON, "MOUSE_PRESS_LEFT_BUTTON", scopePath);
        egret::ScriptUtil::registerEnumValue(Mouse::MOUSE_RELEASE_LEFT_BUTTON, "MOUSE_RELEASE_LEFT_BUTTON", scopePath);
        egret::ScriptUtil::registerEnumValue(Mouse::MOUSE_PRESS_MIDDLE_BUTTON, "MOUSE_PRESS_MIDDLE_BUTTON", scopePath);
        egret::ScriptUtil::registerEnumValue(Mouse::MOUSE_RELEASE_MIDDLE_BUTTON, "MOUSE_RELEASE_MIDDLE_BUTTON", scopePath);
        egret::ScriptUtil::registerEnumValue(Mouse::MOUSE_PRESS_RIGHT_BUTTON, "MOUSE_PRESS_RIGHT_BUTTON", scopePath);
        egret::ScriptUtil::registerEnumValue(Mouse::MOUSE_RELEASE_RIGHT_BUTTON, "MOUSE_RELEASE_RIGHT_BUTTON", scopePath);
        egret::ScriptUtil::registerEnumValue(Mouse::MOUSE_MOVE, "MOUSE_MOVE", scopePath);
        egret::ScriptUtil::registerEnumValue(Mouse::MOUSE_WHEEL, "MOUSE_WHEEL", scopePath);
    }

    // Register enumeration Node::Type.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Node");
        egret::ScriptUtil::registerEnumValue(Node::NODE, "NODE", scopePath);
        egret::ScriptUtil::registerEnumValue(Node::JOINT, "JOINT", scopePath);
    }

    // Register enumeration ParticleEmitter::BlendMode.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("ParticleEmitter");
        egret::ScriptUtil::registerEnumValue(ParticleEmitter::BLEND_NONE, "BLEND_NONE", scopePath);
        egret::ScriptUtil::registerEnumValue(ParticleEmitter::BLEND_ALPHA, "BLEND_ALPHA", scopePath);
        egret::ScriptUtil::registerEnumValue(ParticleEmitter::BLEND_ADDITIVE, "BLEND_ADDITIVE", scopePath);
        egret::ScriptUtil::registerEnumValue(ParticleEmitter::BLEND_MULTIPLIED, "BLEND_MULTIPLIED", scopePath);
    }

    // Register enumeration PhysicsCollisionObject::CollisionListener::EventType.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("PhysicsCollisionObject");
        scopePath.push_back("CollisionListener");
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionObject::CollisionListener::COLLIDING, "COLLIDING", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionObject::CollisionListener::NOT_COLLIDING, "NOT_COLLIDING", scopePath);
    }

    // Register enumeration PhysicsCollisionObject::Type.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("PhysicsCollisionObject");
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionObject::RIGID_BODY, "RIGID_BODY", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionObject::CHARACTER, "CHARACTER", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionObject::GHOST_OBJECT, "GHOST_OBJECT", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionObject::VEHICLE, "VEHICLE", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionObject::VEHICLE_WHEEL, "VEHICLE_WHEEL", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionObject::NONE, "NONE", scopePath);
    }

    // Register enumeration PhysicsCollisionShape::Type.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("PhysicsCollisionShape");
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionShape::SHAPE_NONE, "SHAPE_NONE", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionShape::SHAPE_BOX, "SHAPE_BOX", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionShape::SHAPE_SPHERE, "SHAPE_SPHERE", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionShape::SHAPE_CAPSULE, "SHAPE_CAPSULE", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionShape::SHAPE_MESH, "SHAPE_MESH", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsCollisionShape::SHAPE_HEIGHTFIELD, "SHAPE_HEIGHTFIELD", scopePath);
    }

    // Register enumeration PhysicsController::Listener::EventType.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("PhysicsController");
        scopePath.push_back("Listener");
        egret::ScriptUtil::registerEnumValue(PhysicsController::Listener::ACTIVATED, "ACTIVATED", scopePath);
        egret::ScriptUtil::registerEnumValue(PhysicsController::Listener::DEACTIVATED, "DEACTIVATED", scopePath);
    }

    // Register enumeration Properties::Type.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Properties");
        egret::ScriptUtil::registerEnumValue(Properties::NONE, "NONE", scopePath);
        egret::ScriptUtil::registerEnumValue(Properties::STRING, "STRING", scopePath);
        egret::ScriptUtil::registerEnumValue(Properties::NUMBER, "NUMBER", scopePath);
        egret::ScriptUtil::registerEnumValue(Properties::VECTOR2, "kmVec2", scopePath);
        egret::ScriptUtil::registerEnumValue(Properties::VECTOR3, "kmVec3", scopePath);
        egret::ScriptUtil::registerEnumValue(Properties::VECTOR4, "kmVec4", scopePath);
        egret::ScriptUtil::registerEnumValue(Properties::MATRIX, "MATRIX", scopePath);
    }

    // Register enumeration RenderState::AutoBinding.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("RenderState");
        egret::ScriptUtil::registerEnumValue(RenderState::NONE, "NONE", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::WORLD_MATRIX, "WORLD_MATRIX", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::VIEW_MATRIX, "VIEW_MATRIX", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::PROJECTION_MATRIX, "PROJECTION_MATRIX", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::WORLD_VIEW_MATRIX, "WORLD_VIEW_MATRIX", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::VIEW_PROJECTION_MATRIX, "VIEW_PROJECTION_MATRIX", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::WORLD_VIEW_PROJECTION_MATRIX, "WORLD_VIEW_PROJECTION_MATRIX", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::INVERSE_TRANSPOSE_WORLD_MATRIX, "INVERSE_TRANSPOSE_WORLD_MATRIX", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX, "INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::CAMERA_WORLD_POSITION, "CAMERA_WORLD_POSITION", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::CAMERA_VIEW_POSITION, "CAMERA_VIEW_POSITION", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::MATRIX_PALETTE, "MATRIX_PALETTE", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::SCENE_AMBIENT_COLOR, "SCENE_AMBIENT_COLOR", scopePath);
    }

    // Register enumeration RenderState::Blend.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("RenderState");
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_ZERO, "BLEND_ZERO", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_ONE, "BLEND_ONE", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_SRC_COLOR, "BLEND_SRC_COLOR", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_ONE_MINUS_SRC_COLOR, "BLEND_ONE_MINUS_SRC_COLOR", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_DST_COLOR, "BLEND_DST_COLOR", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_ONE_MINUS_DST_COLOR, "BLEND_ONE_MINUS_DST_COLOR", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_SRC_ALPHA, "BLEND_SRC_ALPHA", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_ONE_MINUS_SRC_ALPHA, "BLEND_ONE_MINUS_SRC_ALPHA", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_DST_ALPHA, "BLEND_DST_ALPHA", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_ONE_MINUS_DST_ALPHA, "BLEND_ONE_MINUS_DST_ALPHA", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_CONSTANT_ALPHA, "BLEND_CONSTANT_ALPHA", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_ONE_MINUS_CONSTANT_ALPHA, "BLEND_ONE_MINUS_CONSTANT_ALPHA", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::BLEND_SRC_ALPHA_SATURATE, "BLEND_SRC_ALPHA_SATURATE", scopePath);
    }

    // Register enumeration RenderState::CullFaceSide.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("RenderState");
        egret::ScriptUtil::registerEnumValue(RenderState::CULL_FACE_SIDE_BACK, "CULL_FACE_SIDE_BACK", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::CULL_FACE_SIDE_FRONT, "CULL_FACE_SIDE_FRONT", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::CULL_FACE_SIDE_FRONT_AND_BACK, "CULL_FACE_SIDE_FRONT_AND_BACK", scopePath);
    }

    // Register enumeration RenderState::DepthFunction.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("RenderState");
        egret::ScriptUtil::registerEnumValue(RenderState::DEPTH_NEVER, "DEPTH_NEVER", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::DEPTH_LESS, "DEPTH_LESS", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::DEPTH_EQUAL, "DEPTH_EQUAL", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::DEPTH_LEQUAL, "DEPTH_LEQUAL", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::DEPTH_GREATER, "DEPTH_GREATER", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::DEPTH_NOTEQUAL, "DEPTH_NOTEQUAL", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::DEPTH_GEQUAL, "DEPTH_GEQUAL", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::DEPTH_ALWAYS, "DEPTH_ALWAYS", scopePath);
    }

    // Register enumeration RenderState::FrontFace.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("RenderState");
        egret::ScriptUtil::registerEnumValue(RenderState::FRONT_FACE_CW, "FRONT_FACE_CW", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::FRONT_FACE_CCW, "FRONT_FACE_CCW", scopePath);
    }

    // Register enumeration RenderState::StencilFunction.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("RenderState");
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_NEVER, "STENCIL_NEVER", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_ALWAYS, "STENCIL_ALWAYS", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_LESS, "STENCIL_LESS", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_LEQUAL, "STENCIL_LEQUAL", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_EQUAL, "STENCIL_EQUAL", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_GREATER, "STENCIL_GREATER", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_GEQUAL, "STENCIL_GEQUAL", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_NOTEQUAL, "STENCIL_NOTEQUAL", scopePath);
    }

    // Register enumeration RenderState::StencilOperation.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("RenderState");
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_OP_KEEP, "STENCIL_OP_KEEP", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_OP_ZERO, "STENCIL_OP_ZERO", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_OP_REPLACE, "STENCIL_OP_REPLACE", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_OP_INCR, "STENCIL_OP_INCR", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_OP_DECR, "STENCIL_OP_DECR", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_OP_INVERT, "STENCIL_OP_INVERT", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_OP_INCR_WRAP, "STENCIL_OP_INCR_WRAP", scopePath);
        egret::ScriptUtil::registerEnumValue(RenderState::STENCIL_OP_DECR_WRAP, "STENCIL_OP_DECR_WRAP", scopePath);
    }

    // Register enumeration Script::Scope.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Script");
        egret::ScriptUtil::registerEnumValue(Script::GLOBAL, "GLOBAL", scopePath);
        egret::ScriptUtil::registerEnumValue(Script::PROTECTED, "PROTECTED", scopePath);
    }

    // Register enumeration Sprite::BlendMode.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Sprite");
        egret::ScriptUtil::registerEnumValue(Sprite::BLEND_NONE, "BLEND_NONE", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::BLEND_ALPHA, "BLEND_ALPHA", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::BLEND_ADDITIVE, "BLEND_ADDITIVE", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::BLEND_MULTIPLIED, "BLEND_MULTIPLIED", scopePath);
    }

    // Register enumeration Sprite::FlipFlags.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Sprite");
        egret::ScriptUtil::registerEnumValue(Sprite::FLIP_NONE, "FLIP_NONE", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::FLIP_VERTICAL, "FLIP_VERTICAL", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::FLIP_HORIZONTAL, "FLIP_HORIZONTAL", scopePath);
    }

    // Register enumeration Sprite::Offset.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Sprite");
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_LEFT, "OFFSET_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_HCENTER, "OFFSET_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_RIGHT, "OFFSET_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_TOP, "OFFSET_TOP", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_VCENTER, "OFFSET_VCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_BOTTOM, "OFFSET_BOTTOM", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_ANCHOR, "OFFSET_ANCHOR", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_TOP_LEFT, "OFFSET_TOP_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_VCENTER_LEFT, "OFFSET_VCENTER_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_BOTTOM_LEFT, "OFFSET_BOTTOM_LEFT", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_TOP_HCENTER, "OFFSET_TOP_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_VCENTER_HCENTER, "OFFSET_VCENTER_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_BOTTOM_HCENTER, "OFFSET_BOTTOM_HCENTER", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_TOP_RIGHT, "OFFSET_TOP_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_VCENTER_RIGHT, "OFFSET_VCENTER_RIGHT", scopePath);
        egret::ScriptUtil::registerEnumValue(Sprite::OFFSET_BOTTOM_RIGHT, "OFFSET_BOTTOM_RIGHT", scopePath);
    }

    // Register enumeration Terrain::Flags.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Terrain");
        egret::ScriptUtil::registerEnumValue(Terrain::DEBUG_PATCHES, "DEBUG_PATCHES", scopePath);
        egret::ScriptUtil::registerEnumValue(Terrain::FRUSTUM_CULLING, "FRUSTUM_CULLING", scopePath);
        egret::ScriptUtil::registerEnumValue(Terrain::LEVEL_OF_DETAIL, "LEVEL_OF_DETAIL", scopePath);
    }

    // Register enumeration TextBox::InputMode.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("TextBox");
        egret::ScriptUtil::registerEnumValue(TextBox::TEXT, "TEXT", scopePath);
        egret::ScriptUtil::registerEnumValue(TextBox::PASSWORD, "PASSWORD", scopePath);
    }

    // Register enumeration Texture::CubeFace.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Texture");
        egret::ScriptUtil::registerEnumValue(Texture::POSITIVE_X, "POSITIVE_X", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::NEGATIVE_X, "NEGATIVE_X", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::POSITIVE_Y, "POSITIVE_Y", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::NEGATIVE_Y, "NEGATIVE_Y", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::POSITIVE_Z, "POSITIVE_Z", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::NEGATIVE_Z, "NEGATIVE_Z", scopePath);
    }

    // Register enumeration Texture::Filter.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Texture");
        egret::ScriptUtil::registerEnumValue(Texture::NEAREST, "NEAREST", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::LINEAR, "LINEAR", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::NEAREST_MIPMAP_NEAREST, "NEAREST_MIPMAP_NEAREST", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::LINEAR_MIPMAP_NEAREST, "LINEAR_MIPMAP_NEAREST", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::NEAREST_MIPMAP_LINEAR, "NEAREST_MIPMAP_LINEAR", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::LINEAR_MIPMAP_LINEAR, "LINEAR_MIPMAP_LINEAR", scopePath);
    }

    // Register enumeration Texture::Format.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Texture");
        egret::ScriptUtil::registerEnumValue(Texture::UNKNOWN, "UNKNOWN", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::RGB, "RGB", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::RGBA, "RGBA", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::ALPHA, "ALPHA", scopePath);
    }

    // Register enumeration Texture::Type.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Texture");
        egret::ScriptUtil::registerEnumValue(Texture::TEXTURE_2D, "TEXTURE_2D", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::TEXTURE_CUBE, "TEXTURE_CUBE", scopePath);
    }

    // Register enumeration Texture::Wrap.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Texture");
        egret::ScriptUtil::registerEnumValue(Texture::REPEAT, "REPEAT", scopePath);
        egret::ScriptUtil::registerEnumValue(Texture::CLAMP, "CLAMP", scopePath);
    }

    // Register enumeration Touch::TouchEvent.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("Touch");
        egret::ScriptUtil::registerEnumValue(Touch::TOUCH_PRESS, "TOUCH_PRESS", scopePath);
        egret::ScriptUtil::registerEnumValue(Touch::TOUCH_RELEASE, "TOUCH_RELEASE", scopePath);
        egret::ScriptUtil::registerEnumValue(Touch::TOUCH_MOVE, "TOUCH_MOVE", scopePath);
    }

    // Register enumeration VertexFormat::Usage.
    {
        std::vector<std::string> scopePath;
        scopePath.push_back("VertexFormat");
        egret::ScriptUtil::registerEnumValue(VertexFormat::POSITION, "POSITION", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::NORMAL, "NORMAL", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::COLOR, "COLOR", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::TANGENT, "TANGENT", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::BINORMAL, "BINORMAL", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::BLENDWEIGHTS, "BLENDWEIGHTS", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::BLENDINDICES, "BLENDINDICES", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::TEXCOORD0, "TEXCOORD0", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::TEXCOORD1, "TEXCOORD1", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::TEXCOORD2, "TEXCOORD2", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::TEXCOORD3, "TEXCOORD3", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::TEXCOORD4, "TEXCOORD4", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::TEXCOORD5, "TEXCOORD5", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::TEXCOORD6, "TEXCOORD6", scopePath);
        egret::ScriptUtil::registerEnumValue(VertexFormat::TEXCOORD7, "TEXCOORD7", scopePath);
    }
}

int lua__strcmpnocase(lua_State* state)
{
    // Get the number of parameters.
    int paramCount = lua_gettop(state);

    // Attempt to match the parameters to a valid binding.
    switch (paramCount)
    {
        case 2:
        {
            if ((lua_type(state, 1) == LUA_TSTRING || lua_type(state, 1) == LUA_TNIL) &&
                (lua_type(state, 2) == LUA_TSTRING || lua_type(state, 2) == LUA_TNIL))
            {
                // Get parameter 1 off the stack.
                const char* param1 = egret::ScriptUtil::getString(1, false);

                // Get parameter 2 off the stack.
                const char* param2 = egret::ScriptUtil::getString(2, false);

                int result = strcmpnocase(param1, param2);

                // Push the return value onto the stack.
                lua_pushinteger(state, result);

                return 1;
            }

            lua_pushstring(state, "lua__strcmpnocase - Failed to match the given parameters to a valid function signature.");
            lua_error(state);
            break;
        }
        default:
        {
            lua_pushstring(state, "Invalid number of parameters (expected 2).");
            lua_error(state);
            break;
        }
    }
    return 0;
}

}
